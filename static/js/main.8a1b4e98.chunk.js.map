{"version":3,"sources":["components/Grid/index.tsx","types.ts","engine.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["drawGraphic","value","x1","y1","x2","y2","stroke","cx","cy","rx","ry","fill","makeBox","i","j","onBoxClick","key","className","onClick","viewBox","valueToDisplay","Grid","data","map","row","vectors","center","isSameBox","box1","box2","getSumOfBoxes","boxes","reduce","sum","box","intersectBoxes","boxes1","boxes2","filter","some","makeEngineMove","emptyBoxes","entries","push","length","Error","set","vector","max","nextMove","Math","floor","random","m","v","triple","getBoxesWithBox","flat","flipTurn","currentTurn","makeMove","atTurn","r","App","useState","turn","count","state","setState","style","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a1b4e98.chunk.js","sourcesContent":["import React from \"react\";\nimport { GRID_O, GRID_X, GridData, GridValue, GridIndex, BoxIndex } from \"../../types\";\nimport \"./Grid.css\";\n\ninterface Props {\n  data: GridData,\n  onBoxClick?: (box: BoxIndex) => void\n}\n\nconst drawX = () => (<>\n  <line x1=\"5\" y1=\"45\" x2=\"45\" y2=\"5\" stroke=\"red\" />\n  <line x1=\"5\" y1=\"5\" x2=\"45\" y2=\"45\" stroke=\"red\" />\n</>);\n\nconst drawO = () => (<ellipse cx=\"25\" cy=\"25\" rx=\"20\" ry=\"20\" stroke=\"blue\" fill=\"none\" />);\n\nconst drawGraphic = (value: GridValue) => (value === GRID_X && drawX()) || (value === GRID_O && drawO());\n\nconst valueToDisplay = (value: GridValue) => (<svg viewBox=\"0, 0, 50, 50\">\n  {drawGraphic(value)}\n</svg>);\n\nconst makeBox = (i: GridIndex, j: GridIndex, value: GridValue, onBoxClick?: (box: BoxIndex) => void) => (\n  <div key={`${i}${j}`}\n    className={`box h-${j} v-${i}`}\n    onClick={() => typeof onBoxClick !== \"undefined\" && onBoxClick([i, j])}>\n    {valueToDisplay(value)}\n  </div>\n);\n\nconst Grid: React.FC<Props> = ({ data, onBoxClick }) => (\n  <div className=\"grid\">\n    {data.map((row, i) => row.map((value, j) => makeBox(i as GridIndex, j as GridIndex, value, onBoxClick)))}\n  </div>\n);\n\nexport default Grid;","export const GRID_X = 1, GRID_O = -1, GRID_EMPTY = 0;\n\nexport type GridData = [GridRow, GridRow, GridRow];\n\nexport type GridRow = [GridValue, GridValue, GridValue];\n\nexport type GridIndex = 0 | 1 | 2;\n\nexport type BoxIndex = [GridIndex, GridIndex]\n\nexport type GridValue = typeof GRID_X | typeof GRID_O | typeof GRID_EMPTY;\n\nexport type PlayerAtTurn = typeof GRID_X | typeof GRID_O;","import { GridData, BoxIndex, GRID_EMPTY, GridIndex } from \"./types\";\n\nconst rows: BoxIndex[][] = [[[0, 0], [0, 1], [0, 2]], [[1, 0], [1, 1], [1, 2]], [[2, 0], [2, 1], [2, 2]]];\nconst columns: BoxIndex[][] = [[[0, 0], [1, 0], [2, 0]], [[0, 1], [1, 1], [2, 1]], [[0, 2], [1, 2], [2, 2]]];\nconst diagonals: BoxIndex[][] = [[[0, 0], [1, 1], [2, 2]], [[0, 2], [1, 1], [2, 0]]];\nconst vectors = [rows, columns, diagonals];\nconst center: BoxIndex = [1, 1];\n\nconst isSameBox = (box1: BoxIndex, box2: BoxIndex) => box1[0] === box2[0] && box1[1] === box2[1];\nconst getSumOfBoxes: (boxes: BoxIndex[], data: GridData) => number = (boxes, data) => boxes.reduce<number>((sum, box) => sum + data[box[0]][box[1]], 0);\nconst intersectBoxes: (boxes1: BoxIndex[], boxes2: BoxIndex[]) => BoxIndex[] =\n  (boxes1, boxes2) => boxes1.filter(box1 => boxes2.some(box2 => isSameBox(box1, box2)));\nconst getBoxesWithBox: (boxes: BoxIndex[], box: BoxIndex) => BoxIndex[] = (boxes, box) => intersectBoxes([box], boxes);\n\nconst makeEngineMove: (data: GridData) => BoxIndex = (data) => {\n  const\n    emptyBoxes: BoxIndex[] = [];\n  for (const [i, row] of data.entries()) {\n    for (const [j, value] of row.entries()) {\n      if (value === GRID_EMPTY) {\n        emptyBoxes.push([i as GridIndex, j as GridIndex]);\n      }\n    }\n  }\n  if (emptyBoxes.length === 0) {\n    throw new Error(\"No empty Boxes left!\");\n  }\n  for (const set of vectors) { // checks if engine can win\n    for (const vector of set) {\n      if (getSumOfBoxes(vector, data) === -2) {\n        return intersectBoxes(vector, emptyBoxes)[0];\n      }\n    }\n  }\n  for (const set of vectors) { // prevents player from winning next turn\n    for (const vector of set) {\n      if (getSumOfBoxes(vector, data) === 2) {\n        return intersectBoxes(vector, emptyBoxes)[0];\n      }\n    }\n  }\n  if (emptyBoxes.filter(box => isSameBox(box, center)).length > 0) { // take center if available\n    return center;\n  }\n  let max = 0;\n  let nextMove: BoxIndex = emptyBoxes[Math.floor(Math.random() * emptyBoxes.length)];\n  for (const box of emptyBoxes) {\n    const m = vectors.map(v => v.filter(triple => getBoxesWithBox(triple, box).length > 0)).filter(v => v.length > 0).flat().filter(boxes => getSumOfBoxes(boxes, data) > 0).length;\n    if (m > max) {\n      max = m;\n      nextMove = box;\n    }\n  }\n  return nextMove;\n}\n\nexport default makeEngineMove;","import React, { useState } from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\nimport { GridData, GRID_X, GRID_O, PlayerAtTurn, GridValue, GridRow, GRID_EMPTY, BoxIndex } from './types';\nimport makeEngineMove from './engine';\n\nexport interface State {\n  data: GridData,\n  turn: PlayerAtTurn,\n  count: number\n}\n\nconst flipTurn: (currentTurn: PlayerAtTurn) => PlayerAtTurn = (currentTurn) => currentTurn === GRID_X ? GRID_O : GRID_X;\n\nconst makeMove: (box: BoxIndex, data: GridData, atTurn: PlayerAtTurn) => GridData = (box, data, atTurn) =>\n  data.map<GridRow>((r, i) => i !== box[0] ? r : r.map<GridValue>((v, j) => j !== box[1] ? v : atTurn) as GridRow) as GridData;\n\n\nfunction App() {\n  const [state, setState] = useState<State>({\n    data: [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n    turn: GRID_X,\n    count: 0\n  })\n  return (\n    <div style={{ height: \"100vh\" }}>\n      <Grid data={state.data} onBoxClick={(box) => {\n        if (state.data[box[0]][box[1]] === GRID_EMPTY) {\n          setState(state => ({\n            ...state,\n            data: makeMove(box, state.data, state.turn),\n            turn: flipTurn(state.turn),\n            count: state.count + 1\n          }));\n          if (state.count < 4) {\n            setState(state => ({\n              ...state,\n              data: makeMove(makeEngineMove(state.data), state.data, state.turn),\n              turn: flipTurn(state.turn)\n            }));\n          }\n        }\n      }} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}